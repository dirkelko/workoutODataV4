{
  "version": 3,
  "sources": ["../../../src/util/AriaLabelHelper.ts"],
  "sourcesContent": ["import type UI5Element from \"../UI5Element.js\";\nimport type { ChangeInfo } from \"../UI5Element.js\";\n\ntype InvalidateCallback = (changeInfo: ChangeInfo) => void;\ntype MutationCallback = () => void;\ntype AssociatedElement = {\n\tobserver: MutationObserver | null;\n\tcallbacks: Array<MutationCallback>;\n};\ntype RegisteredElement = {\n\thost: UI5Element;\n\tobservedElements: Array<HTMLElement>;\n\tcallback: MutationCallback;\n\tinvalidationCallback: InvalidateCallback;\n};\n\nconst associatedElements = new WeakMap<HTMLElement, AssociatedElement>();\nconst registeredElements = new WeakMap<UI5Element, RegisteredElement>();\n\ntype AccessibleElement = HTMLElement & {\n\taccessibleNameRef?: string;\n\taccessibleName?: string;\n};\n\nconst observerOptions = {\n\tattributes: true,\n\tchildList: true,\n\tcharacterData: true,\n\tsubtree: true,\n};\n\nconst getEffectiveAriaLabelText = (el: HTMLElement) => {\n\tconst accessibleEl = el as AccessibleElement;\n\n\tif (!accessibleEl.accessibleNameRef) {\n\t\tif (accessibleEl.accessibleName) {\n\t\t\treturn accessibleEl.accessibleName;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\treturn getAllAccessibleNameRefTexts(el);\n};\n\n/**\n *\n * @param {HTMLElement} el Defines the HTMLElement, for which you need to get all related texts\n */\nconst getAllAccessibleNameRefTexts = (el: HTMLElement) => {\n\tconst ids = (el as AccessibleElement).accessibleNameRef?.split(\" \") ?? [];\n\tconst owner = el.getRootNode() as HTMLElement;\n\tlet result = \"\";\n\n\tids.forEach((elementId: string, index: number) => {\n\t\tconst element = owner.querySelector(`[id='${elementId}']`);\n\t\tconst text = `${element && element.textContent ? element.textContent : \"\"}`;\n\t\tif (text) {\n\t\t\tresult += text;\n\t\t\tif (index < ids.length - 1) {\n\t\t\t\tresult += \" \";\n\t\t\t}\n\t\t}\n\t});\n\n\treturn result;\n};\n\nconst _getAllAssociatedElementsFromDOM = (el: UI5Element): Array<HTMLElement> => {\n\tconst set = new Set<HTMLElement>();\n\t// adding labels with attribute for matching the el.id\n\tconst labelsForAssociated = _getAssociatedLabels(el);\n\tlabelsForAssociated.forEach(itm => {\n\t\tset.add(itm);\n\t});\n\t// adding other elements that id is the same as accessibleNameRef value\n\tconst value = el[\"accessibleNameRef\" as keyof typeof el] as string;\n\tconst ids = value?.split(\" \") ?? [];\n\tids.forEach(id => {\n\t\tconst refEl = _getReferencedElementById(el, id);\n\t\tif (refEl) {\n\t\t\tset.add(refEl);\n\t\t}\n\t});\n\treturn Array.from(set);\n};\n\nconst _getAssociatedLabels = (el: HTMLElement): Array<HTMLElement> => {\n\tconst labels = (el.getRootNode() as HTMLElement).querySelectorAll<HTMLElement>(`[for=\"${el.id}\"]`);\n\treturn Array.from(labels);\n};\n\nconst _getReferencedElementById = (el: HTMLElement, elementId: string): HTMLElement | null => {\n\treturn (el.getRootNode() as HTMLElement).querySelector<HTMLElement>(`[id='${elementId}']`);\n};\n\n/**\n * @param {HTMLElement} el Defines the HTMLElement, for which you need to get all related \"label for\" texts\n */\nconst getAssociatedLabelForTexts = (el: HTMLElement) => {\n\tconst results: Array<string> = [];\n\tconst labels = _getAssociatedLabels(el);\n\n\tlabels.forEach((label: HTMLElement) => {\n\t\tconst labelText = label.textContent;\n\t\tlabelText && results.push(labelText);\n\t});\n\n\tif (results.length) {\n\t\treturn results.join(\" \");\n\t}\n\n\treturn undefined;\n};\n\nconst _createInvalidationCallback = (el: UI5Element) => {\n\tconst invalidationCallback = (changeInfo: ChangeInfo) => {\n\t\tif (!(changeInfo && changeInfo.type === \"property\" && changeInfo.name === \"accessibleNameRef\")) {\n\t\t\treturn;\n\t\t}\n\t\tconst registeredElement = registeredElements.get(el);\n\t\tif (!registeredElement) {\n\t\t\treturn;\n\t\t}\n\t\tconst oldAssociatedElements = registeredElement.observedElements;\n\t\tconst newAssociatedElements = _getAllAssociatedElementsFromDOM(el);\n\t\toldAssociatedElements.forEach(oldElement => {\n\t\t\tif (!newAssociatedElements.includes(oldElement)) {\n\t\t\t\t_removeObservedElementFromRegisteredElement(registeredElement, oldElement);\n\t\t\t}\n\t\t});\n\t\tnewAssociatedElements.forEach(newElement => {\n\t\t\tif (!oldAssociatedElements.includes(newElement)) {\n\t\t\t\t_addObservedElementToRegisteredElement(registeredElement, newElement);\n\t\t\t\tregisteredElement.observedElements.push(newElement);\n\t\t\t}\n\t\t});\n\t\tregisteredElement?.callback();\n\t};\n\treturn invalidationCallback;\n};\n\nconst registerUI5Element = (el: UI5Element, callback: MutationCallback) => {\n\tif (registeredElements.has(el)) {\n\t\treturn;\n\t}\n\tconst allAssociatedElements = _getAllAssociatedElementsFromDOM(el);\n\tconst invalidationCallback = _createInvalidationCallback(el);\n\tconst registeredElement = {\n\t\thost: el,\n\t\tobservedElements: allAssociatedElements,\n\t\tcallback,\n\t\tinvalidationCallback,\n\t};\n\tregisteredElements.set(el, registeredElement);\n\tel.attachInvalidate(invalidationCallback);\n\n\tallAssociatedElements.forEach((element: HTMLElement) => {\n\t\t_addObservedElementToRegisteredElement(registeredElement, element);\n\t});\n\tcallback();\n};\n\nconst _addObservedElementToRegisteredElement = (registeredElement: RegisteredElement, element: HTMLElement) => {\n\tlet associatedElement = associatedElements.get(element);\n\tif (!associatedElement) {\n\t\tassociatedElement = { observer: null, callbacks: [] };\n\t\tconst observer = new MutationObserver(() => {\n\t\t\tconst callbacks = (associatedElement as AssociatedElement).callbacks;\n\t\t\tcallbacks.forEach(callback => {\n\t\t\t\tcallback();\n\t\t\t});\n\t\t\tconst domEl = document.getElementById(element.id);\n\t\t\t// if no longer should be observed from this registeredElement, remove it\n\t\t\tif (!(registeredElement.host.id === element.getAttribute(\"for\") || domEl)) {\n\t\t\t\t_removeObservedElementFromRegisteredElement(registeredElement, element);\n\t\t\t}\n\t\t});\n\t\tassociatedElement.observer = observer;\n\t\tobserver.observe(element, observerOptions);\n\t\tassociatedElements.set(element, associatedElement);\n\t}\n\tif (!associatedElement.callbacks.includes(registeredElement.callback)) {\n\t\tassociatedElement.callbacks.push(registeredElement.callback);\n\t}\n};\n\nconst _removeObservedElementFromRegisteredElement = (registeredElement: RegisteredElement, element: HTMLElement) => {\n\tconst associatedElement = associatedElements.get(element);\n\tif (associatedElement) {\n\t\tassociatedElement.callbacks = associatedElement.callbacks.filter(itm => itm !== registeredElement.callback);\n\t\tif (!associatedElement.callbacks.length) {\n\t\t\tassociatedElement.observer?.disconnect();\n\t\t\tassociatedElements.delete(element);\n\t\t}\n\t}\n\tregisteredElement.observedElements = registeredElement.observedElements.filter(itm => itm !== element);\n};\n\nconst deregisterUI5Element = (el: UI5Element) => {\n\tconst registeredElement = registeredElements.get(el);\n\tif (!registeredElement) {\n\t\treturn;\n\t}\n\tconst oldObservedElements = [...registeredElement.observedElements];\n\toldObservedElements.forEach(observedElement => {\n\t\t_removeObservedElementFromRegisteredElement(registeredElement, observedElement);\n\t});\n\tel.detachInvalidate(registeredElement.invalidationCallback);\n\tregisteredElements.delete(el);\n};\n\nexport {\n\tgetEffectiveAriaLabelText,\n\tgetAssociatedLabelForTexts,\n\tregisterUI5Element,\n\tderegisterUI5Element,\n\tgetAllAccessibleNameRefTexts,\n};\n"],
  "mappings": "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",
  "names": ["associatedElements", "registeredElements", "observerOptions", "getEffectiveAriaLabelText", "el", "accessibleEl", "getAllAccessibleNameRefTexts", "ids", "owner", "result", "elementId", "index", "element", "text", "_getAllAssociatedElementsFromDOM", "set", "_getAssociatedLabels", "itm", "id", "refEl", "_getReferencedElementById", "labels", "getAssociatedLabelForTexts", "results", "label", "labelText", "_createInvalidationCallback", "changeInfo", "registeredElement", "oldAssociatedElements", "newAssociatedElements", "oldElement", "_removeObservedElementFromRegisteredElement", "newElement", "_addObservedElementToRegisteredElement", "registerUI5Element", "callback", "allAssociatedElements", "invalidationCallback", "associatedElement", "observer", "domEl", "deregisterUI5Element", "observedElement"]
}
