{
  "version": 3,
  "sources": ["../../src/Keys.ts"],
  "sourcesContent": ["const KeyCodes = {\n\tBACKSPACE: 8,\n\tTAB: 9,\n\tENTER: 13,\n\tSHIFT: 16,\n\tCONTROL: 17,\n\tALT: 18,\n\tBREAK: 19,\n\tCAPS_LOCK: 20,\n\tESCAPE: 27,\n\tSPACE: 32,\n\tPAGE_UP: 33,\n\tPAGE_DOWN: 34,\n\tEND: 35,\n\tHOME: 36,\n\tARROW_LEFT: 37,\n\tARROW_UP: 38,\n\tARROW_RIGHT: 39,\n\tARROW_DOWN: 40,\n\tPRINT: 44,\n\tINSERT: 45,\n\tDELETE: 46,\n\tDIGIT_0: 48,\n\tDIGIT_1: 49,\n\tDIGIT_2: 50,\n\tDIGIT_3: 51,\n\tDIGIT_4: 52,\n\tDIGIT_5: 53,\n\tDIGIT_6: 54,\n\tDIGIT_7: 55,\n\tDIGIT_8: 56,\n\tDIGIT_9: 57,\n\tA: 65,\n\tB: 66,\n\tC: 67,\n\tD: 68,\n\tE: 69,\n\tF: 70,\n\tG: 71,\n\tH: 72,\n\tI: 73,\n\tJ: 74,\n\tK: 75,\n\tL: 76,\n\tM: 77,\n\tN: 78,\n\tO: 79,\n\tP: 80,\n\tQ: 81,\n\tR: 82,\n\tS: 83,\n\tT: 84,\n\tU: 85,\n\tV: 86,\n\tW: 87,\n\tX: 88,\n\tY: 89,\n\tZ: 90,\n\tWINDOWS: 91,\n\tCONTEXT_MENU: 93,\n\tTURN_OFF: 94,\n\tSLEEP: 95,\n\tNUMPAD_0: 96,\n\tNUMPAD_1: 97,\n\tNUMPAD_2: 98,\n\tNUMPAD_3: 99,\n\tNUMPAD_4: 100,\n\tNUMPAD_5: 101,\n\tNUMPAD_6: 102,\n\tNUMPAD_7: 103,\n\tNUMPAD_8: 104,\n\tNUMPAD_9: 105,\n\tNUMPAD_ASTERISK: 106,\n\tNUMPAD_PLUS: 107,\n\tNUMPAD_MINUS: 109,\n\tNUMPAD_COMMA: 110,\n\tNUMPAD_SLASH: 111,\n\tF1: 112,\n\tF2: 113,\n\tF3: 114,\n\tF4: 115,\n\tF5: 116,\n\tF6: 117,\n\tF7: 118,\n\tF8: 119,\n\tF9: 120,\n\tF10: 121,\n\tF11: 122,\n\tF12: 123,\n\tNUM_LOCK: 144,\n\tSCROLL_LOCK: 145,\n\tCOLON: 186,\n\tPLUS: 187,\n\tCOMMA: 188,\n\tSLASH: 189,\n\tDOT: 190,\n\tPIPE: 191,\n\tSEMICOLON: 192,\n\tMINUS: 219,\n\tGREAT_ACCENT: 220,\n\tEQUALS: 221,\n\tSINGLE_QUOTE: 222,\n\tBACKSLASH: 226,\n} as const;\ntype KeyCodes = typeof KeyCodes[keyof typeof KeyCodes];\n\nconst isEnter = (event: KeyboardEvent): boolean => (event.key ? event.key === \"Enter\" : event.keyCode === KeyCodes.ENTER) && !hasModifierKeys(event);\n\nconst isEnterShift = (event: KeyboardEvent): boolean => (event.key ? event.key === \"Enter\" : event.keyCode === KeyCodes.ENTER) && checkModifierKeys(event, false, false, true);\n\nconst isSpace = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"Spacebar\" || event.key === \" \") : event.keyCode === KeyCodes.SPACE) && !hasModifierKeys(event);\n\nconst isSpaceShift = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"Spacebar\" || event.key === \" \") : event.keyCode === KeyCodes.SPACE) && checkModifierKeys(event, false, false, true);\n\nconst isSpaceCtrl = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"Spacebar\" || event.key === \" \") : event.keyCode === KeyCodes.SPACE) && checkModifierKeys(event, true, false, false);\n\nconst isLeft = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowLeft\" || event.key === \"Left\") : event.keyCode === KeyCodes.ARROW_LEFT) && !hasModifierKeys(event);\n\nconst isRight = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowRight\" || event.key === \"Right\") : event.keyCode === KeyCodes.ARROW_RIGHT) && !hasModifierKeys(event);\n\nconst isUp = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowUp\" || event.key === \"Up\") : event.keyCode === KeyCodes.ARROW_UP) && !hasModifierKeys(event);\n\nconst isDown = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowDown\" || event.key === \"Down\") : event.keyCode === KeyCodes.ARROW_DOWN) && !hasModifierKeys(event);\n\nconst isLeftCtrl = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowLeft\" || event.key === \"Left\") : event.keyCode === KeyCodes.ARROW_LEFT) && checkModifierKeys(event, true, false, false);\n\nconst isRightCtrl = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowRight\" || event.key === \"Right\") : event.keyCode === KeyCodes.ARROW_RIGHT) && checkModifierKeys(event, true, false, false);\n\nconst isUpCtrl = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowUp\" || event.key === \"Up\") : event.keyCode === KeyCodes.ARROW_UP) && checkModifierKeys(event, true, false, false);\n\nconst isDownCtrl = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowDown\" || event.key === \"Down\") : event.keyCode === KeyCodes.ARROW_DOWN) && checkModifierKeys(event, true, false, false);\n\nconst isUpShift = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowUp\" || event.key === \"Up\") : event.keyCode === KeyCodes.ARROW_UP) && checkModifierKeys(event, false, false, true);\n\nconst isDownShift = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowDown\" || event.key === \"Down\") : event.keyCode === KeyCodes.ARROW_DOWN) && checkModifierKeys(event, false, false, true);\n\nconst isUpAlt = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowUp\" || event.key === \"Up\") : event.keyCode === KeyCodes.ARROW_UP) && checkModifierKeys(event, false, true, false);\n\nconst isDownAlt = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowDown\" || event.key === \"Down\") : event.keyCode === KeyCodes.ARROW_DOWN) && checkModifierKeys(event, false, true, false);\n\nconst isLeftShift = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowLeft\" || event.key === \"Left\") : event.keyCode === KeyCodes.ARROW_LEFT) && checkModifierKeys(event, false, false, true);\n\nconst isRightShift = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowRight\" || event.key === \"Right\") : event.keyCode === KeyCodes.ARROW_RIGHT) && checkModifierKeys(event, false, false, true);\n\nconst isLeftShiftCtrl = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowLeft\" || event.key === \"Left\") : event.keyCode === KeyCodes.ARROW_LEFT) && checkModifierKeys(event, true, false, true);\n\nconst isRightShiftCtrl = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowRight\" || event.key === \"Right\") : event.keyCode === KeyCodes.ARROW_RIGHT) && checkModifierKeys(event, true, false, true);\n\nconst isUpShiftCtrl = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowUp\" || event.key === \"Up\") : event.keyCode === KeyCodes.ARROW_UP) && checkModifierKeys(event, true, false, true);\n\nconst isDownShiftCtrl = (event: KeyboardEvent): boolean => (event.key ? (event.key === \"ArrowDown\" || event.key === \"Down\") : event.keyCode === KeyCodes.ARROW_DOWN) && checkModifierKeys(event, true, false, true);\n\nconst isHome = (event: KeyboardEvent): boolean => (event.key ? event.key === \"Home\" : event.keyCode === KeyCodes.HOME) && !hasModifierKeys(event);\n\nconst isEnd = (event: KeyboardEvent): boolean => (event.key ? event.key === \"End\" : event.keyCode === KeyCodes.END) && !hasModifierKeys(event);\n\nconst isHomeCtrl = (event: KeyboardEvent): boolean => (event.key ? event.key === \"Home\" : event.keyCode === KeyCodes.HOME) && checkModifierKeys(event, true, false, false);\n\nconst isHomeShift = (event: KeyboardEvent): boolean => (event.key ? event.key === \"Home\" : event.keyCode === KeyCodes.HOME) && checkModifierKeys(event, false, false, true);\n\nconst isEndCtrl = (event: KeyboardEvent): boolean => (event.key ? event.key === \"End\" : event.keyCode === KeyCodes.END) && checkModifierKeys(event, true, false, false);\n\nconst isEndShift = (event: KeyboardEvent): boolean => (event.key ? event.key === \"End\" : event.keyCode === KeyCodes.END) && checkModifierKeys(event, false, false, true);\n\nconst isEscape = (event: KeyboardEvent): boolean => (event.key ? event.key === \"Escape\" || event.key === \"Esc\" : event.keyCode === KeyCodes.ESCAPE) && !hasModifierKeys(event);\n\nconst isTabNext = (event: KeyboardEvent): boolean => (event.key ? event.key === \"Tab\" : event.keyCode === KeyCodes.TAB) && !hasModifierKeys(event);\n\nconst isTabPrevious = (event: KeyboardEvent): boolean => (event.key ? event.key === \"Tab\" : event.keyCode === KeyCodes.TAB) && checkModifierKeys(event, /* Ctrl */ false, /* Alt */ false, /* Shift */ true);\n\nconst isBackSpace = (event: KeyboardEvent): boolean => (event.key ? event.key === \"Backspace\" : event.keyCode === KeyCodes.BACKSPACE) && !hasModifierKeys(event);\n\nconst isDelete = (event: KeyboardEvent): boolean => (event.key ? event.key === \"Delete\" : event.keyCode === KeyCodes.DELETE) && !hasModifierKeys(event);\n\nconst isDeleteShift = (event: KeyboardEvent): boolean => (event.key ? event.key === \"Delete\" : event.keyCode === KeyCodes.DELETE) && checkModifierKeys(event, false, false, true);\n\nconst isInsertShift = (event: KeyboardEvent): boolean => (event.key ? event.key === \"Insert\" : event.keyCode === KeyCodes.DELETE) && checkModifierKeys(event, false, false, true);\n\nconst isInsertCtrl = (event: KeyboardEvent): boolean => (event.key ? event.key === \"Insert\" : event.keyCode === KeyCodes.DELETE) && checkModifierKeys(event, true, false, false);\n\nconst isPageUp = (event: KeyboardEvent): boolean => (event.key ? event.key === \"PageUp\" : event.keyCode === KeyCodes.PAGE_UP) && !hasModifierKeys(event);\n\nconst isPageDown = (event: KeyboardEvent): boolean => (event.key ? event.key === \"PageDown\" : event.keyCode === KeyCodes.PAGE_DOWN) && !hasModifierKeys(event);\n\nconst isPageUpShift = (event: KeyboardEvent): boolean => (event.key ? event.key === \"PageUp\" : event.keyCode === KeyCodes.PAGE_UP) && checkModifierKeys(event, false, false, true);\n\nconst isPageUpAlt = (event: KeyboardEvent): boolean => (event.key ? event.key === \"PageUp\" : event.keyCode === KeyCodes.PAGE_UP) && checkModifierKeys(event, false, true, false);\n\nconst isPageDownShift = (event: KeyboardEvent): boolean => (event.key ? event.key === \"PageDown\" : event.keyCode === KeyCodes.PAGE_DOWN) && checkModifierKeys(event, false, false, true);\n\nconst isPageDownAlt = (event: KeyboardEvent): boolean => (event.key ? event.key === \"PageDown\" : event.keyCode === KeyCodes.PAGE_DOWN) && checkModifierKeys(event, false, true, false);\n\nconst isPageUpShiftCtrl = (event: KeyboardEvent): boolean => (event.key ? event.key === \"PageUp\" : event.keyCode === KeyCodes.PAGE_UP) && checkModifierKeys(event, true, false, true);\n\nconst isPageDownShiftCtrl = (event: KeyboardEvent): boolean => (event.key ? event.key === \"PageDown\" : event.keyCode === KeyCodes.PAGE_DOWN) && checkModifierKeys(event, true, false, true);\n\nconst isPlus = (event: KeyboardEvent): boolean => (event.key ? event.key === \"+\" : event.keyCode === KeyCodes.PLUS) || (event.keyCode === KeyCodes.NUMPAD_PLUS && !hasModifierKeys(event));\n\nconst isMinus = (event: KeyboardEvent): boolean => (event.key ? event.key === \"-\" : event.keyCode === KeyCodes.MINUS) || (event.keyCode === KeyCodes.NUMPAD_MINUS && !hasModifierKeys(event));\n\nconst isShow = (event: KeyboardEvent): boolean => {\n\tif (event.key) {\n\t\treturn isF4(event) || isShowByArrows(event);\n\t}\n\n\treturn (event.keyCode === KeyCodes.F4 && !hasModifierKeys(event)) || (event.keyCode === KeyCodes.ARROW_DOWN && checkModifierKeys(event, /* Ctrl */ false, /* Alt */ true, /* Shift */ false));\n};\n\nconst isF2 = (event: KeyboardEvent): boolean => {\n\treturn event.key === \"F2\" && !hasModifierKeys(event);\n};\n\nconst isF4 = (event: KeyboardEvent): boolean => {\n\treturn event.key === \"F4\" && !hasModifierKeys(event);\n};\n\nconst isF4Shift = (event: KeyboardEvent): boolean => (event.key ? event.key === \"F4\" : event.keyCode === KeyCodes.F4) && checkModifierKeys(event, false, false, true);\n\nconst isF10Shift = (event: KeyboardEvent): boolean => (event.key ? event.key === \"F10\" : event.keyCode === KeyCodes.F10) && checkModifierKeys(event, false, false, true);\n\nconst isF6Next = (event: KeyboardEvent): boolean => ((event.key ? event.key === \"F6\" : event.keyCode === KeyCodes.F6) && checkModifierKeys(event, false, false, false))\n\t|| ((event.key ? (event.key === \"ArrowDown\" || event.key === \"Down\") : event.keyCode === KeyCodes.ARROW_DOWN) && checkModifierKeys(event, true, true, false));\n\nconst isF6Previous = (event: KeyboardEvent): boolean => ((event.key ? event.key === \"F6\" : event.keyCode === KeyCodes.F6) && checkModifierKeys(event, false, false, true))\n\t|| ((event.key ? (event.key === \"ArrowUp\" || event.key === \"Up\") : event.keyCode === KeyCodes.ARROW_UP) && checkModifierKeys(event, true, true, false));\n\nconst isF7 = (event: KeyboardEvent): boolean => (event.key ? event.key === \"F7\" : event.keyCode === KeyCodes.F7) && !hasModifierKeys(event);\n\nconst isShowByArrows = (event: KeyboardEvent): boolean => {\n\treturn ((event.key === \"ArrowDown\" || event.key === \"Down\") || (event.key === \"ArrowUp\" || event.key === \"Up\")) && checkModifierKeys(event, /* Ctrl */ false, /* Alt */ true, /* Shift */ false);\n};\n\nconst isShift = (event: KeyboardEvent): boolean => event.key === \"Shift\" || event.keyCode === KeyCodes.SHIFT;\n\nconst isCtrlA = (event: KeyboardEvent): boolean => ((event.key === \"A\" || event.key === \"a\") || event.which === KeyCodes.A) && checkModifierKeys(event, true, false, false);\n\nconst isCtrlV = (event: KeyboardEvent): boolean => ((event.key === \"V\" || event.key === \"v\") || event.which === KeyCodes.V) && checkModifierKeys(event, true, false, false);\n\nconst isKeyA = (event: KeyboardEvent): boolean => ((event.key === \"A\" || event.key === \"a\") || event.which === KeyCodes.A) && checkModifierKeys(event, false, false, false);\n\nconst isKeyP = (event: KeyboardEvent): boolean => ((event.key === \"P\" || event.key === \"p\") || event.which === KeyCodes.P) && checkModifierKeys(event, false, false, false);\n\nconst hasModifierKeys = (event: KeyboardEvent): boolean => event.shiftKey || event.altKey || getCtrlKey(event);\n\nconst getCtrlKey = (event: KeyboardEvent): boolean => !!(event.metaKey || event.ctrlKey); // double negation doesn't have effect on boolean but ensures null and undefined are equivalent to false.\n\nconst checkModifierKeys = (event: KeyboardEvent, bCtrlKey: boolean, bAltKey: boolean, bShiftKey: boolean):boolean => event.shiftKey === bShiftKey && event.altKey === bAltKey && getCtrlKey(event) === bCtrlKey;\n\nconst isNumber = (event: KeyboardEvent): boolean => ((event.key ? \"0123456789\".indexOf(event.key) !== -1 : event.keyCode >= KeyCodes.DIGIT_0 && event.keyCode <= KeyCodes.DIGIT_9) && checkModifierKeys(event, false, false, false));\n\nconst isColon = (event: KeyboardEvent): boolean => ((event.key ? event.key === \":\" : event.keyCode === KeyCodes.COLON) && checkModifierKeys(event, false, false, true));\n\nexport {\n\tisEnter,\n\tisEnterShift,\n\tisSpace,\n\tisSpaceShift,\n\tisSpaceCtrl,\n\tisLeft,\n\tisRight,\n\tisUp,\n\tisDown,\n\tisLeftCtrl,\n\tisRightCtrl,\n\tisUpCtrl,\n\tisDownCtrl,\n\tisUpShift,\n\tisDownShift,\n\tisUpAlt,\n\tisDownAlt,\n\tisLeftShift,\n\tisRightShift,\n\tisLeftShiftCtrl,\n\tisRightShiftCtrl,\n\tisUpShiftCtrl,\n\tisDownShiftCtrl,\n\tisHome,\n\tisEnd,\n\tisPlus,\n\tisMinus,\n\tisHomeCtrl,\n\tisEndCtrl,\n\tisHomeShift,\n\tisEndShift,\n\tisEscape,\n\tisTabNext,\n\tisTabPrevious,\n\tisBackSpace,\n\tisDelete,\n\tisShow,\n\tisF2,\n\tisF4,\n\tisF4Shift,\n\tisF10Shift,\n\tisF6Previous,\n\tisF6Next,\n\tisF7,\n\tisPageUp,\n\tisPageDown,\n\tisPageUpShift,\n\tisPageUpAlt,\n\tisPageDownShift,\n\tisPageDownAlt,\n\tisPageUpShiftCtrl,\n\tisPageDownShiftCtrl,\n\tisShift,\n\tisCtrlA,\n\tisCtrlV,\n\tisKeyA,\n\tisKeyP,\n\tisDeleteShift,\n\tisInsertShift,\n\tisInsertCtrl,\n\tisNumber,\n\tisColon,\n};\n"],
  "mappings": "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",
  "names": ["KeyCodes", "isEnter", "event", "hasModifierKeys", "isEnterShift", "checkModifierKeys", "isSpace", "isSpaceShift", "isSpaceCtrl", "isLeft", "isRight", "isUp", "isDown", "isLeftCtrl", "isRightCtrl", "isUpCtrl", "isDownCtrl", "isUpShift", "isDownShift", "isUpAlt", "isDownAlt", "isLeftShift", "isRightShift", "isLeftShiftCtrl", "isRightShiftCtrl", "isUpShiftCtrl", "isDownShiftCtrl", "isHome", "isEnd", "isHomeCtrl", "isHomeShift", "isEndCtrl", "isEndShift", "isEscape", "isTabNext", "isTabPrevious", "isBackSpace", "isDelete", "isDeleteShift", "isInsertShift", "isInsertCtrl", "isPageUp", "isPageDown", "isPageUpShift", "isPageUpAlt", "isPageDownShift", "isPageDownAlt", "isPageUpShiftCtrl", "isPageDownShiftCtrl", "isPlus", "isMinus", "isShow", "isF4", "isShowByArrows", "isF2", "isF4Shift", "isF10Shift", "isF6Next", "isF6Previous", "isF7", "isShift", "isCtrlA", "isCtrlV", "isKeyA", "isKeyP", "getCtrlKey", "bCtrlKey", "bAltKey", "bShiftKey", "isNumber", "isColon"]
}
